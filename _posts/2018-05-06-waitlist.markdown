---
layout: post
title: "Setting up a Database Connection"
date: 2018-05-06 15:34:00 -0600
categories: "Android development"
---

I will be learning how to use a `SQLite Database` for the next set of tutorials. I personally have a fascination with databases. My favorite part of any new project has always been the designing of a well normalized database. I find that if I get that part right, then writing the application logic is so much easier.

In the first two tutorials, there is a lot of methods and classes being called. I created a diagram to show all the parts we set up so my application is ready to communicate with a database.

![Database Connection Diagram]({{ "/assets/android/may/database_tutorial_diagram.png" }})



For me, one of the major challenges to learning Android development is also learning Java. I have worked with Java frameworks before such as Groovy Grails and Spring MVC, however, I never had to design a java application. Lot of my posts will be discussing some of the various Java OOD concepts that I am lacking such as interfaces and abstract classes. 

# Cursor
In this tutorial, the exercise has us use a cursor to store a query result set on the waitlist table. I read on stackoverflow that cursor stands for cursory-logic, meaning it will iterate over a result set.

# Context
Context is an interface that allows various resources to communicate with one another. Context stores global information about the application state. That is particularly handy when building new objects, access `SharedPreferences`, and accessing intents. The documentation on `Context` is absolutely insane and I am happy to stop here with this hyper simplified explanation. 


# Abstract Class 
I must have read three articles and half a dozen stackoverflow articles on abstract classes, however, I find myself not fully grasping the concept. I believe I need to do some java application design work before I truly get it. 

# RecyclerView.Adapter

# Static vs Non-Static Methods
Does the value the static method produce change if the object properties are different? if the answer is yes, then you need to create a `non-static` method. 


`static` method belongs to the class itself - use this if the method does not have dependencies such as any code outside of its method.
`non-static` (instance) method belongs to each object. You will need to instantiate the object



# Class vs Object vs Instance
`Class` is the blue print that creates an object
`Object` is a software bundle of related state and behavior. Objects combine properties and methods 
`Instance` is pretty much the same as an object far as programmers are concerned and instance/objects can be used interchangably.
  
# GuestViewHolder class

Inner class to hold the views needed to display a single item in the recycler-view

extends RecyclerView.ViewHolder


